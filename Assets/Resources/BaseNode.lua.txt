-- 定义类型
Object = {};


-- 设置__index元方法
Object.__index = Object

-- 对象构造器
local ObjectConstructor = {};
ObjectConstructor.__call = function (type)

    local instance = {};
    instance.class = type;
    instance.name = 'gameObject';
    --instance.class.name  = typeName;
    setmetatable(instance, type.prototype);
    return instance;

end

-- 定义构造函数
function Object:new(baseName)

    local instance = {};
    instance.name =baseName;
    setmetatable(instance, self.prototype);
    return instance;
end

Object.__call = ObjectConstructor.__call;
setmetatable(Object, ObjectConstructor);



-- 定义类型的prototype
Object.prototype = {};

-- 设置prototype的__index元方法
Object.prototype.__index = Object.prototype;

-- 设置prototype的__gc元方法
Object.prototype.__gc = function (instance)
    print(instance, "destroy");
end


function Object:subclass(typeName)

    -- 以传入类型名称作为全局变量名称创建table
    _G[typeName] = {};

    -- 设置元方法__index,并绑定父级类型作为元表
    local subtype = _G[typeName];
    -- 设置类型父类
    subtype.super = self;
    subtype.__call = ObjectConstructor.__call;
    subtype.__index = subtype;
    setmetatable(subtype, self);

    -- 创建prototype并绑定父类prototype作为元表
    subtype.prototype = {};
    subtype.prototype.__index = subtype.prototype;
    subtype.prototype.__gc = self.prototype.__gc;
    subtype.prototype.__tostring = self.prototype.__tostring;
    setmetatable(subtype.prototype, self.prototype);

    return subtype;

end

function Object.prototype:output(a, b)
    -- 求和
    return a + b;
end

function Object.prototype:loadResources(path,objName,states,location)
    print('need resourcesmanager');
end

return Object