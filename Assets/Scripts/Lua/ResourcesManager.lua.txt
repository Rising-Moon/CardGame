local ResourcesManager ={};

ResourcesManager.__index =ResourcesManager;


--------------------------资源表--------------------------
--所有不销毁的obj列表
ResourcesManager.dontDestroyObjAry = {};

--已加载资源的实例化列表，实例化后的obj都存储在这里
--asset--{path, userMap={id--obj}}
ResourcesManager.assetListenerMap = {};



--产生一个实例
function ResourcesManager:init()
    local instance = {};
    setmetatable(instance,ResourcesManager);
    return instance
end


---------------------------外部接口-------------------------
--同步实例化
--请求路径，类型，位置，父物体
function ResourcesManager:syncInstantiate(path,type,position,parent)
    --提供借口
    local objAsset ;
    --加载resources资源
    if type == 1  then
        objAsset=self:LoadResources(path);
        --加载assetbundle资源
    elseif type >= 20 then
        objAsset =self:LoadAssetBundle(path,location,parent);
    else
        print("hello world");
    end


    if objAsset then
        return self:instantiate(path, parent, position);
    else
        print('error to load');
    end

end

--删除对内存资源的引用
--提供给外部调用
function ResourcesManager:clear()
    for i,v in ipairs(self) do
        self.remove(self,i);
    end
    for j,v in ipairs(self) do
        print(j..v);
    end
    print("resources drop");
end

--删除单个物体
function ResourcesManager:dropResoureces(obj)

    CS.UnityEngine.GameObject.Destroy(obj);
    print("success");
    --CS.UnityEngine.Resources.UnloadUnusedAssets();
        --卸载有误
        --CS.UnityEngine.AssetBundle.Unload(true);
end

----------------------------内部接口---------------------------------------

--资源实例化
function ResourcesManager:instantiate(path, parent, position, rotation)
    local gameObj
    if parent then
        --self.object:GetComponent("Transform"):SetParent(parent:GetComponent("Transform"));
        if position then
            gameObj = CS.UnityEngine.Object.Instantiate(self.assetListenerMap[path], position, rotation or CS.UnityEngine.Quaternion.identity);
        else
            gameObj = CS.UnityEngine.Object.Instantiate(self.assetListenerMap[path], parent, false)
        end
        gameObj:GetComponent("Transform"):SetParent(parent:GetComponent("Transform"));
    else
        gameObj = CS.UnityEngine.Object.Instantiate(self.assetListenerMap[path], position or CS.UnityEngine.Vector3.zero, rotation or CS.UnityEngine.Quaternion.identity)
    end
    --GameObject =CS.UnityEngine.Object.Instantiate(self.assetListenerMap[original]);
    --self.object.transform.localPosition=location;
    return gameObj
end

--根据assetbundle路径查找ab资源信息
function ResourcesManager:findPath(path)
    local objpath = nil;
    --print("正则表达式:");
    objpath =string.match(path,"/[%w]+%.");
    --print(string.sub(objpath,2,#objpath-1));
    return string.sub(objpath,2,#objpath-1)
end

--加载resources资源
function ResourcesManager:LoadResources(path)
    --print("resources test");
    self.assetListenerMap[path] = CS.UnityEngine.Resources.Load(path);
    --print(path);
    --print(CS.UnityEngine.Resources.Load(path));
    --print(self.assetListenerMap[path]);
    if self.assetListenerMap[path] then
        --print(self.assetListenerMap[path]);
        return 1
    else
        return nil
    end

end

--加载assetbundle资源
function ResourcesManager:LoadAssetBundle(path,location,parent)
    self.path =path;
    if self.type ==21 then
        return self:LoadLocalAssetBundle();
    elseif self.type ==22 then
        return self:LoadMemoryAssetBundle();
    elseif self.type ==23 then
        return self:LoadRequestAssetBundle();
    end

end

--加载本地assetbundle资源
--已测试
function ResourcesManager:LoadLocalAssetBundle()
    local temp =CS.UnityEngine.AssetBundle.LoadFromFile(self.path);
    local temppath = self:findPath(self.path);
    self.assetListenerMap[path]=temp:LoadAsset(temppath);
    if self.assetListenerMap[path] then
        --print(self.assetListenerMap[path]);
        return 1
    else
        return nil
    end
end

--加载内存assetbundle资源
--未测试
function ResourcesManager:LoadMemoryAssetBundle()
    local temp =CS.UnityEngine.AssetBundle.LoadFromMemory(File.ReadAllBytes(self.path));
    local temppath = self:findPath(self.path);
    self.object=CS.UnityEngine.Object.Instantiate(temp:LoadAsset(temppath));
end

--加载服务器assetbundle资源
--未实现
function ResourcesManager:LoadRequestAssetBundle()
    local request = {};
    local temp =CS.UnityEngine.AssetBundle.LoadFromMemory(File.ReadAllBytes(self.path));
    local temppath = self:findPath(self.path);
    self.object=CS.UnityEngine.Object.Instantiate(temp:LoadAsset(temppath));
end

ResourcesManager:init();

return ResourcesManager